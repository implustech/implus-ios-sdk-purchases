// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ImplusPurchases
import Foundation
import GRPCClient
@_exported import ImplusPurchases
import StoreKit
import Swift
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMEntitlement : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public func isActive() -> Swift.Bool
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias ProductGroupsRequestCompletionHandler = (ImplusPurchases.ProductGroups, Swift.Error?) -> Swift.Void
public typealias ProductPurchaseCompletionHandler = (StoreKit.SKPaymentTransaction, ImplusPurchases.EntitlementList, Swift.Error?, Swift.Bool) -> Swift.Void
public typealias EntitlementList = [Swift.String : ImplusPurchases.IMEntitlement]
public typealias ProductGroups = [Swift.String : ImplusPurchases.IMGroup]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMPurchase : ObjectiveC.NSObject {
  @objc public static let shared: ImplusPurchases.IMPurchase
  @objc public func configure(_ appkey: Swift.String)
  @objc public func configure(_ appKey: Swift.String, userId: Swift.String)
  @objc public func getProductGroups(_ completionHandler: ImplusPurchases.ProductGroupsRequestCompletionHandler?)
  @objc public func canMakePayments() -> Swift.Bool
  @objc public func purchaseProduct(_ product: ImplusPurchases.IMProduct, completion: @escaping ImplusPurchases.ProductPurchaseCompletionHandler)
  @objc public func hasActiveSubscription(_ completion: @escaping (ImplusPurchases.EntitlementList, Swift.Error?) -> Swift.Void)
  @objc public func restorePurchases(_ completion: @escaping (ImplusPurchases.EntitlementList, Swift.Error?) -> Swift.Void)
  @objc public func enableLog(_ isEnable: Swift.Bool)
  @objc public func isSandbox() -> Swift.Bool
  @objc public func invalidateCache()
  @objc public func getSubscriberData(completion: ((ImplusPurchases.Subscriber?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMProduct : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let product: StoreKit.SKProduct
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class IMGroup : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let products: [ImplusPurchases.IMProduct]
  @objc override dynamic public init()
  @objc deinit
}
